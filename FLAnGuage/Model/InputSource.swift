//
//  InputSource.swift
//  FLAnGuage
//
//  Created by Beer Koala on 30.05.2023.
//

import InputMethodKit

import Foundation

struct InputSource {
    var inputSource: TISInputSource

    var id: String {
        let inputSourceName = TISGetInputSourceProperty(inputSource, kTISPropertyInputSourceID)
        return String.unsafeBitCast(from: inputSourceName)
    }

    var localizedName: String {
        let inputSourceID = TISGetInputSourceProperty(inputSource, kTISPropertyLocalizedName)
        return String.unsafeBitCast(from: inputSourceID)
    }

    var language: String {
        let inputSourceLanguage = TISGetInputSourceProperty(inputSource, kTISPropertyInputSourceLanguages)
        return String.unsafeBitCastArray(from: inputSourceLanguage).first ?? ""
    }

    // The possible values are specified by property value constants
    //  kTISCategoryKeyboardInputSource, kTISCategoryPaletteInputSource, kTISCategoryInkInputSource
    var category: String {
        let inputSourceLanguage = TISGetInputSourceProperty(inputSource, kTISPropertyInputSourceCategory)
        return String.unsafeBitCastArray(from: inputSourceLanguage).first ?? ""
    }

//    var image: NSImage? {
//        switch self.language {
//        case "en": return NSImage(named: "usa")
//        case "uk": return NSImage(named: "ukraine")
//        default: return nil
//        }
//    }

    var flagName: String? {

        if let storedTitle = UserDefaultStorage.inputSourceTitles[self.id] {
            return storedTitle
        }

        switch self.language {
        case "uk": return "ðŸ‡ºðŸ‡¦"
        case "fr": return "ðŸ‡«ðŸ‡·"
        case "en":
            if self.id == "com.apple.CharacterPaletteIM" {
                return "ðŸ˜œ"
            }
            return "ðŸ‡¬ðŸ‡§"
        case "ar": return "ðŸ‡¦ðŸ‡ª"
        case "cs": return "ðŸ‡¨ðŸ‡¿"
        case "da": return "ðŸ‡©ðŸ‡°"
        case "de": return "ðŸ‡©ðŸ‡ª"
        case "el": return "ðŸ‡¬ðŸ‡·"
        case "es": return "ðŸ‡ªðŸ‡¸"
        case "fi": return "ðŸ‡«ðŸ‡®"
        case "he": return "ðŸ‡®ðŸ‡±"
        case "hi", "bn", "ta": return "ðŸ‡®ðŸ‡³"
        case "it": return "ðŸ‡®ðŸ‡¹"
        case "jp", "ja": return "ðŸ‡¯ðŸ‡µ"
        case "ko": return "ðŸ‡°ðŸ‡·"
        case "nl": return "ðŸ‡§ðŸ‡ª"
        case "hu": return "ðŸ‡­ðŸ‡º"
        case "id": return "ðŸ‡®ðŸ‡©"
        case "no": return "ðŸ‡³ðŸ‡´"
        case "pl": return "ðŸ‡µðŸ‡±"
        case "pt": return "ðŸ‡µðŸ‡¹"
        case "ro": return "ðŸ‡·ðŸ‡´"
        case "ru": return "ðŸ‡·ðŸ‡º"
        case "sk": return "ðŸ‡¸ðŸ‡°"
        case "sv": return "ðŸ‡¸ðŸ‡ª"
        case "th": return "ðŸ‡¹ðŸ‡­"
        case "tr": return "ðŸ‡¹ðŸ‡·"
        case "zh": return "ðŸ‡¨ðŸ‡³"
        default: return nil
        }
    }

    var statusBarName: String {
        if let name = self.flagName {
            return name
        } else {
            return "\(self.language)"
        }
    }

    var menuName: String {
        let statusBarName = self.statusBarName
        if statusBarName.count == 1 {
            return "\(self.flagName ?? "") \(self.localizedName)"
        }
        return statusBarName
    }

}

private extension String {
    static func unsafeBitCast(from inputSourceProperty: UnsafeMutableRawPointer?) -> String {
        if let inputSourceProperty = inputSourceProperty {
            return Swift.unsafeBitCast(inputSourceProperty, to: CFString.self) as String
        } else {
            return String.empty
        }
    }

    static func unsafeBitCastArray(from inputSourceProperty: UnsafeMutableRawPointer?) -> [String] {
        if let inputSourceProperty = inputSourceProperty {
            return Swift.unsafeBitCast(inputSourceProperty, to: CFArray.self) as? [String] ?? []
        } else {
            return []
        }
    }
}

private extension Array where Element == InputSource {
    func appendEmoji() -> [InputSource] {
        if let emojiKeyboard = TISInputSource.emojiKeyboard() {
            return self + [emojiKeyboard]
        }
        return self
    }
}

extension TISInputSource {

    private static let filterKeyboardIS = [
        kTISPropertyInputSourceCategory: kTISCategoryKeyboardInputSource
    ] as CFDictionary

    func inputSource() -> InputSource {
        return InputSource(inputSource: self)
    }

    static func allKeyboardInputSources(_ allInstalled: Bool) -> [InputSource] {

        let allKeyboards = (
            TISCreateInputSourceList(filterKeyboardIS, allInstalled).takeRetainedValue() as? [TISInputSource] ?? []
        )
            .map {
                $0.inputSource()
            }
            .appendEmoji()

        return allKeyboards
            .filter {
                $0.id != "com.apple.PressAndHold"
            }
    }

    static func emojiKeyboard() -> InputSource? {
        let filterEmoji = [kTISPropertyInputSourceID: "com.apple.CharacterPaletteIM"] as CFDictionary

        return (TISCreateInputSourceList(filterEmoji, false).takeRetainedValue() as? [TISInputSource] ?? [])
            .first?
            .inputSource()
    }
}
